#pragma kernel TextureGen

struct Pixel
{
    int id;
};

// TEXTURES
Texture2D _Tex_Dirt_Course;

// SAMPLERS
SamplerState _PointRepeatSampler;

// PARAMETERS
int _TextureWidth;
int _TextureHeight;
float2 _WorldPosition;
int _PPU;
StructuredBuffer<Pixel> _PixelBuffer;

// OUTPUT
RWTexture2D<float4> _ResultTexture;

float2 CalcWorldPos(uint3 i)
{
    int smallestDimension = _TextureWidth;
    
    if (_TextureHeight < smallestDimension)
        smallestDimension = _TextureHeight;

    float4 worldPos = float4(i.x / (float) smallestDimension, i.y / (float) smallestDimension, 0, 0);
    worldPos.x += _WorldPosition.x / (float) smallestDimension * (float) _PPU;
    worldPos.y += _WorldPosition.y / (float) smallestDimension * (float) _PPU;
    
    return worldPos;
}

float CalcDistFromAir(float2 worldPos, int maxCheckRange)
{
    return 0;
}

[numthreads(8,8,1)]
void TextureGen (uint3 i : SV_DispatchThreadID)
{
    int id = _PixelBuffer[i.x * _TextureHeight + i.y].id;
    
    if (id == 0)
    {
        _ResultTexture[i.xy] = float4(0, 0, 0, 0);
    }
    else
    {
        float2 worldPos = CalcWorldPos(i);
        float distFromAir = CalcDistFromAir(worldPos, 5);
    
        _ResultTexture[i.xy] = _Tex_Dirt_Course.SampleLevel(_PointRepeatSampler, worldPos, 0);
    }
}
